// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package message_transmitter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SendMessage is the `sendMessage` instruction.
type SendMessage struct {
	Params *SendMessageParams

	// [0] = [WRITE, SIGNER] eventRentPayer
	//
	// [1] = [SIGNER] senderAuthorityPda
	//
	// [2] = [WRITE] messageTransmitter
	//
	// [3] = [WRITE, SIGNER] messageSentEventData
	//
	// [4] = [] senderProgram
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSendMessageInstructionBuilder creates a new `SendMessage` instruction builder.
func NewSendMessageInstructionBuilder() *SendMessage {
	nd := &SendMessage{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *SendMessage) SetParams(params SendMessageParams) *SendMessage {
	inst.Params = &params
	return inst
}

// SetEventRentPayerAccount sets the "eventRentPayer" account.
func (inst *SendMessage) SetEventRentPayerAccount(eventRentPayer ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(eventRentPayer).WRITE().SIGNER()
	return inst
}

// GetEventRentPayerAccount gets the "eventRentPayer" account.
func (inst *SendMessage) GetEventRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSenderAuthorityPdaAccount sets the "senderAuthorityPda" account.
func (inst *SendMessage) SetSenderAuthorityPdaAccount(senderAuthorityPda ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(senderAuthorityPda).SIGNER()
	return inst
}

// GetSenderAuthorityPdaAccount gets the "senderAuthorityPda" account.
func (inst *SendMessage) GetSenderAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMessageTransmitterAccount sets the "messageTransmitter" account.
func (inst *SendMessage) SetMessageTransmitterAccount(messageTransmitter ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(messageTransmitter).WRITE()
	return inst
}

// GetMessageTransmitterAccount gets the "messageTransmitter" account.
func (inst *SendMessage) GetMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMessageSentEventDataAccount sets the "messageSentEventData" account.
func (inst *SendMessage) SetMessageSentEventDataAccount(messageSentEventData ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(messageSentEventData).WRITE().SIGNER()
	return inst
}

// GetMessageSentEventDataAccount gets the "messageSentEventData" account.
func (inst *SendMessage) GetMessageSentEventDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSenderProgramAccount sets the "senderProgram" account.
func (inst *SendMessage) SetSenderProgramAccount(senderProgram ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(senderProgram)
	return inst
}

// GetSenderProgramAccount gets the "senderProgram" account.
func (inst *SendMessage) GetSenderProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SendMessage) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SendMessage) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst SendMessage) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SendMessage,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SendMessage) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SendMessage) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.EventRentPayer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SenderAuthorityPda is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MessageTransmitter is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MessageSentEventData is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SenderProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SendMessage) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SendMessage")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      eventRentPayer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  senderAuthorityPda", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  messageTransmitter", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("messageSentEventData", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       senderProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj SendMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SendMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewSendMessageInstruction declares a new SendMessage instruction with the provided parameters and accounts.
func NewSendMessageInstruction(
	// Parameters:
	params SendMessageParams,
	// Accounts:
	eventRentPayer ag_solanago.PublicKey,
	senderAuthorityPda ag_solanago.PublicKey,
	messageTransmitter ag_solanago.PublicKey,
	messageSentEventData ag_solanago.PublicKey,
	senderProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SendMessage {
	return NewSendMessageInstructionBuilder().
		SetParams(params).
		SetEventRentPayerAccount(eventRentPayer).
		SetSenderAuthorityPdaAccount(senderAuthorityPda).
		SetMessageTransmitterAccount(messageTransmitter).
		SetMessageSentEventDataAccount(messageSentEventData).
		SetSenderProgramAccount(senderProgram).
		SetSystemProgramAccount(systemProgram)
}
