// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package message_transmitter

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MessageSent struct {
	RentPayer ag_solanago.PublicKey
	Message   []byte
}

var MessageSentDiscriminator = [8]byte{131, 100, 133, 56, 166, 225, 151, 60}

func (obj MessageSent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MessageSentDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `RentPayer` param:
	err = encoder.Encode(obj.RentPayer)
	if err != nil {
		return err
	}
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MessageSent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MessageSentDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[131 100 133 56 166 225 151 60]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `RentPayer`:
	err = decoder.Decode(&obj.RentPayer)
	if err != nil {
		return err
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	return nil
}

type MessageTransmitter struct {
	Owner              ag_solanago.PublicKey
	PendingOwner       ag_solanago.PublicKey
	AttesterManager    ag_solanago.PublicKey
	Pauser             ag_solanago.PublicKey
	Paused             bool
	LocalDomain        uint32
	Version            uint32
	SignatureThreshold uint32
	EnabledAttesters   []ag_solanago.PublicKey
	MaxMessageBodySize uint64
	NextAvailableNonce uint64
}

var MessageTransmitterDiscriminator = [8]byte{71, 40, 180, 142, 19, 203, 35, 252}

func (obj MessageTransmitter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MessageTransmitterDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `PendingOwner` param:
	err = encoder.Encode(obj.PendingOwner)
	if err != nil {
		return err
	}
	// Serialize `AttesterManager` param:
	err = encoder.Encode(obj.AttesterManager)
	if err != nil {
		return err
	}
	// Serialize `Pauser` param:
	err = encoder.Encode(obj.Pauser)
	if err != nil {
		return err
	}
	// Serialize `Paused` param:
	err = encoder.Encode(obj.Paused)
	if err != nil {
		return err
	}
	// Serialize `LocalDomain` param:
	err = encoder.Encode(obj.LocalDomain)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `SignatureThreshold` param:
	err = encoder.Encode(obj.SignatureThreshold)
	if err != nil {
		return err
	}
	// Serialize `EnabledAttesters` param:
	err = encoder.Encode(obj.EnabledAttesters)
	if err != nil {
		return err
	}
	// Serialize `MaxMessageBodySize` param:
	err = encoder.Encode(obj.MaxMessageBodySize)
	if err != nil {
		return err
	}
	// Serialize `NextAvailableNonce` param:
	err = encoder.Encode(obj.NextAvailableNonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MessageTransmitter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MessageTransmitterDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[71 40 180 142 19 203 35 252]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `PendingOwner`:
	err = decoder.Decode(&obj.PendingOwner)
	if err != nil {
		return err
	}
	// Deserialize `AttesterManager`:
	err = decoder.Decode(&obj.AttesterManager)
	if err != nil {
		return err
	}
	// Deserialize `Pauser`:
	err = decoder.Decode(&obj.Pauser)
	if err != nil {
		return err
	}
	// Deserialize `Paused`:
	err = decoder.Decode(&obj.Paused)
	if err != nil {
		return err
	}
	// Deserialize `LocalDomain`:
	err = decoder.Decode(&obj.LocalDomain)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `SignatureThreshold`:
	err = decoder.Decode(&obj.SignatureThreshold)
	if err != nil {
		return err
	}
	// Deserialize `EnabledAttesters`:
	err = decoder.Decode(&obj.EnabledAttesters)
	if err != nil {
		return err
	}
	// Deserialize `MaxMessageBodySize`:
	err = decoder.Decode(&obj.MaxMessageBodySize)
	if err != nil {
		return err
	}
	// Deserialize `NextAvailableNonce`:
	err = decoder.Decode(&obj.NextAvailableNonce)
	if err != nil {
		return err
	}
	return nil
}

type UsedNonces struct {
	RemoteDomain uint32
	FirstNonce   uint64
	UsedNonces   [100]uint64
}

var UsedNoncesDiscriminator = [8]byte{60, 112, 18, 72, 138, 181, 100, 138}

func (obj UsedNonces) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UsedNoncesDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `RemoteDomain` param:
	err = encoder.Encode(obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Serialize `FirstNonce` param:
	err = encoder.Encode(obj.FirstNonce)
	if err != nil {
		return err
	}
	// Serialize `UsedNonces` param:
	err = encoder.Encode(obj.UsedNonces)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UsedNonces) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UsedNoncesDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[60 112 18 72 138 181 100 138]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `RemoteDomain`:
	err = decoder.Decode(&obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Deserialize `FirstNonce`:
	err = decoder.Decode(&obj.FirstNonce)
	if err != nil {
		return err
	}
	// Deserialize `UsedNonces`:
	err = decoder.Decode(&obj.UsedNonces)
	if err != nil {
		return err
	}
	return nil
}
