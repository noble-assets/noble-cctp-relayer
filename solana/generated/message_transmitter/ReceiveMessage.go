// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package message_transmitter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ReceiveMessage is the `receiveMessage` instruction.
type ReceiveMessage struct {
	Params *ReceiveMessageParams

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] caller
	//
	// [2] = [] authorityPda
	//
	// [3] = [] messageTransmitter
	//
	// [4] = [WRITE] usedNonces
	//
	// [5] = [] receiver
	//
	// [6] = [] systemProgram
	//
	// [7] = [] eventAuthority
	//
	// [8] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewReceiveMessageInstructionBuilder creates a new `ReceiveMessage` instruction builder.
func NewReceiveMessageInstructionBuilder() *ReceiveMessage {
	nd := &ReceiveMessage{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *ReceiveMessage) SetParams(params ReceiveMessageParams) *ReceiveMessage {
	inst.Params = &params
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *ReceiveMessage) SetPayerAccount(payer ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ReceiveMessage) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCallerAccount sets the "caller" account.
func (inst *ReceiveMessage) SetCallerAccount(caller ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(caller).SIGNER()
	return inst
}

// GetCallerAccount gets the "caller" account.
func (inst *ReceiveMessage) GetCallerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityPdaAccount sets the "authorityPda" account.
func (inst *ReceiveMessage) SetAuthorityPdaAccount(authorityPda ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authorityPda)
	return inst
}

// GetAuthorityPdaAccount gets the "authorityPda" account.
func (inst *ReceiveMessage) GetAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMessageTransmitterAccount sets the "messageTransmitter" account.
func (inst *ReceiveMessage) SetMessageTransmitterAccount(messageTransmitter ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(messageTransmitter)
	return inst
}

// GetMessageTransmitterAccount gets the "messageTransmitter" account.
func (inst *ReceiveMessage) GetMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUsedNoncesAccount sets the "usedNonces" account.
func (inst *ReceiveMessage) SetUsedNoncesAccount(usedNonces ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(usedNonces).WRITE()
	return inst
}

// GetUsedNoncesAccount gets the "usedNonces" account.
func (inst *ReceiveMessage) GetUsedNoncesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *ReceiveMessage) SetReceiverAccount(receiver ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiver)
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *ReceiveMessage) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ReceiveMessage) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ReceiveMessage) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *ReceiveMessage) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *ReceiveMessage) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetProgramAccount sets the "program" account.
func (inst *ReceiveMessage) SetProgramAccount(program ag_solanago.PublicKey) *ReceiveMessage {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ReceiveMessage) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst ReceiveMessage) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReceiveMessage,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReceiveMessage) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReceiveMessage) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Caller is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AuthorityPda is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MessageTransmitter is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UsedNonces is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *ReceiveMessage) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReceiveMessage")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            caller", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      authorityPda", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("messageTransmitter", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        usedNonces", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          receiver", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    eventAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj ReceiveMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReceiveMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewReceiveMessageInstruction declares a new ReceiveMessage instruction with the provided parameters and accounts.
func NewReceiveMessageInstruction(
	// Parameters:
	params ReceiveMessageParams,
	// Accounts:
	payer ag_solanago.PublicKey,
	caller ag_solanago.PublicKey,
	authorityPda ag_solanago.PublicKey,
	messageTransmitter ag_solanago.PublicKey,
	usedNonces ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *ReceiveMessage {
	return NewReceiveMessageInstructionBuilder().
		SetParams(params).
		SetPayerAccount(payer).
		SetCallerAccount(caller).
		SetAuthorityPdaAccount(authorityPda).
		SetMessageTransmitterAccount(messageTransmitter).
		SetUsedNoncesAccount(usedNonces).
		SetReceiverAccount(receiver).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
