// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package message_transmitter

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "MessageTransmitter"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_TransferOwnership = ag_binary.TypeID([8]byte{65, 177, 215, 73, 53, 45, 99, 47})

	Instruction_AcceptOwnership = ag_binary.TypeID([8]byte{172, 23, 43, 13, 238, 213, 85, 150})

	Instruction_UpdatePauser = ag_binary.TypeID([8]byte{140, 171, 211, 132, 57, 201, 16, 254})

	Instruction_UpdateAttesterManager = ag_binary.TypeID([8]byte{175, 245, 178, 104, 85, 179, 71, 16})

	Instruction_Pause = ag_binary.TypeID([8]byte{211, 22, 221, 251, 74, 121, 193, 47})

	Instruction_Unpause = ag_binary.TypeID([8]byte{169, 144, 4, 38, 10, 141, 188, 255})

	Instruction_SetMaxMessageBodySize = ag_binary.TypeID([8]byte{168, 178, 8, 117, 217, 167, 219, 31})

	Instruction_EnableAttester = ag_binary.TypeID([8]byte{2, 11, 193, 115, 5, 148, 4, 198})

	Instruction_DisableAttester = ag_binary.TypeID([8]byte{61, 171, 131, 95, 172, 15, 227, 229})

	Instruction_SetSignatureThreshold = ag_binary.TypeID([8]byte{163, 19, 154, 168, 82, 209, 214, 219})

	Instruction_SendMessage = ag_binary.TypeID([8]byte{57, 40, 34, 178, 189, 10, 65, 26})

	Instruction_SendMessageWithCaller = ag_binary.TypeID([8]byte{212, 47, 34, 52, 91, 32, 176, 204})

	Instruction_ReplaceMessage = ag_binary.TypeID([8]byte{189, 189, 210, 163, 149, 205, 69, 229})

	Instruction_ReceiveMessage = ag_binary.TypeID([8]byte{38, 144, 127, 225, 31, 225, 238, 25})

	Instruction_ReclaimEventAccount = ag_binary.TypeID([8]byte{94, 198, 180, 159, 131, 236, 15, 174})

	Instruction_GetNoncePda = ag_binary.TypeID([8]byte{114, 70, 229, 212, 223, 50, 33, 39})

	Instruction_IsNonceUsed = ag_binary.TypeID([8]byte{144, 72, 107, 148, 35, 218, 31, 187})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_TransferOwnership:
		return "TransferOwnership"
	case Instruction_AcceptOwnership:
		return "AcceptOwnership"
	case Instruction_UpdatePauser:
		return "UpdatePauser"
	case Instruction_UpdateAttesterManager:
		return "UpdateAttesterManager"
	case Instruction_Pause:
		return "Pause"
	case Instruction_Unpause:
		return "Unpause"
	case Instruction_SetMaxMessageBodySize:
		return "SetMaxMessageBodySize"
	case Instruction_EnableAttester:
		return "EnableAttester"
	case Instruction_DisableAttester:
		return "DisableAttester"
	case Instruction_SetSignatureThreshold:
		return "SetSignatureThreshold"
	case Instruction_SendMessage:
		return "SendMessage"
	case Instruction_SendMessageWithCaller:
		return "SendMessageWithCaller"
	case Instruction_ReplaceMessage:
		return "ReplaceMessage"
	case Instruction_ReceiveMessage:
		return "ReceiveMessage"
	case Instruction_ReclaimEventAccount:
		return "ReclaimEventAccount"
	case Instruction_GetNoncePda:
		return "GetNoncePda"
	case Instruction_IsNonceUsed:
		return "IsNonceUsed"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"transfer_ownership", (*TransferOwnership)(nil),
		},
		{
			"accept_ownership", (*AcceptOwnership)(nil),
		},
		{
			"update_pauser", (*UpdatePauser)(nil),
		},
		{
			"update_attester_manager", (*UpdateAttesterManager)(nil),
		},
		{
			"pause", (*Pause)(nil),
		},
		{
			"unpause", (*Unpause)(nil),
		},
		{
			"set_max_message_body_size", (*SetMaxMessageBodySize)(nil),
		},
		{
			"enable_attester", (*EnableAttester)(nil),
		},
		{
			"disable_attester", (*DisableAttester)(nil),
		},
		{
			"set_signature_threshold", (*SetSignatureThreshold)(nil),
		},
		{
			"send_message", (*SendMessage)(nil),
		},
		{
			"send_message_with_caller", (*SendMessageWithCaller)(nil),
		},
		{
			"replace_message", (*ReplaceMessage)(nil),
		},
		{
			"receive_message", (*ReceiveMessage)(nil),
		},
		{
			"reclaim_event_account", (*ReclaimEventAccount)(nil),
		},
		{
			"get_nonce_pda", (*GetNoncePda)(nil),
		},
		{
			"is_nonce_used", (*IsNonceUsed)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
