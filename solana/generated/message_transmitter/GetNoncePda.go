// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package message_transmitter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// GetNoncePda is the `getNoncePda` instruction.
type GetNoncePda struct {
	Params *GetNoncePDAParams

	// [0] = [] messageTransmitter
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewGetNoncePdaInstructionBuilder creates a new `GetNoncePda` instruction builder.
func NewGetNoncePdaInstructionBuilder() *GetNoncePda {
	nd := &GetNoncePda{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *GetNoncePda) SetParams(params GetNoncePDAParams) *GetNoncePda {
	inst.Params = &params
	return inst
}

// SetMessageTransmitterAccount sets the "messageTransmitter" account.
func (inst *GetNoncePda) SetMessageTransmitterAccount(messageTransmitter ag_solanago.PublicKey) *GetNoncePda {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(messageTransmitter)
	return inst
}

// GetMessageTransmitterAccount gets the "messageTransmitter" account.
func (inst *GetNoncePda) GetMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst GetNoncePda) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_GetNoncePda,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst GetNoncePda) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *GetNoncePda) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MessageTransmitter is not set")
		}
	}
	return nil
}

func (inst *GetNoncePda) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("GetNoncePda")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("messageTransmitter", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj GetNoncePda) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *GetNoncePda) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewGetNoncePdaInstruction declares a new GetNoncePda instruction with the provided parameters and accounts.
func NewGetNoncePdaInstruction(
	// Parameters:
	params GetNoncePDAParams,
	// Accounts:
	messageTransmitter ag_solanago.PublicKey) *GetNoncePda {
	return NewGetNoncePdaInstructionBuilder().
		SetParams(params).
		SetMessageTransmitterAccount(messageTransmitter)
}
