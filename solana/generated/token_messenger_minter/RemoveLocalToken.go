// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RemoveLocalToken is the `removeLocalToken` instruction.
type RemoveLocalToken struct {
	Params *RemoveLocalTokenParams

	// [0] = [WRITE, SIGNER] payee
	//
	// [1] = [SIGNER] tokenController
	//
	// [2] = [] tokenMinter
	//
	// [3] = [WRITE] localToken
	//
	// [4] = [WRITE] custodyTokenAccount
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] eventAuthority
	//
	// [7] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRemoveLocalTokenInstructionBuilder creates a new `RemoveLocalToken` instruction builder.
func NewRemoveLocalTokenInstructionBuilder() *RemoveLocalToken {
	nd := &RemoveLocalToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *RemoveLocalToken) SetParams(params RemoveLocalTokenParams) *RemoveLocalToken {
	inst.Params = &params
	return inst
}

// SetPayeeAccount sets the "payee" account.
func (inst *RemoveLocalToken) SetPayeeAccount(payee ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payee).WRITE().SIGNER()
	return inst
}

// GetPayeeAccount gets the "payee" account.
func (inst *RemoveLocalToken) GetPayeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenControllerAccount sets the "tokenController" account.
func (inst *RemoveLocalToken) SetTokenControllerAccount(tokenController ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenController).SIGNER()
	return inst
}

// GetTokenControllerAccount gets the "tokenController" account.
func (inst *RemoveLocalToken) GetTokenControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMinterAccount sets the "tokenMinter" account.
func (inst *RemoveLocalToken) SetTokenMinterAccount(tokenMinter ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMinter)
	return inst
}

// GetTokenMinterAccount gets the "tokenMinter" account.
func (inst *RemoveLocalToken) GetTokenMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLocalTokenAccount sets the "localToken" account.
func (inst *RemoveLocalToken) SetLocalTokenAccount(localToken ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(localToken).WRITE()
	return inst
}

// GetLocalTokenAccount gets the "localToken" account.
func (inst *RemoveLocalToken) GetLocalTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCustodyTokenAccountAccount sets the "custodyTokenAccount" account.
func (inst *RemoveLocalToken) SetCustodyTokenAccountAccount(custodyTokenAccount ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(custodyTokenAccount).WRITE()
	return inst
}

// GetCustodyTokenAccountAccount gets the "custodyTokenAccount" account.
func (inst *RemoveLocalToken) GetCustodyTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RemoveLocalToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RemoveLocalToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *RemoveLocalToken) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *RemoveLocalToken) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetProgramAccount sets the "program" account.
func (inst *RemoveLocalToken) SetProgramAccount(program ag_solanago.PublicKey) *RemoveLocalToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *RemoveLocalToken) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst RemoveLocalToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RemoveLocalToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RemoveLocalToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RemoveLocalToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payee is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenController is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMinter is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LocalToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CustodyTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *RemoveLocalToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RemoveLocalToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          payee", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("tokenController", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    tokenMinter", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     localToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   custodyToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" eventAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj RemoveLocalToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RemoveLocalToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewRemoveLocalTokenInstruction declares a new RemoveLocalToken instruction with the provided parameters and accounts.
func NewRemoveLocalTokenInstruction(
	// Parameters:
	params RemoveLocalTokenParams,
	// Accounts:
	payee ag_solanago.PublicKey,
	tokenController ag_solanago.PublicKey,
	tokenMinter ag_solanago.PublicKey,
	localToken ag_solanago.PublicKey,
	custodyTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *RemoveLocalToken {
	return NewRemoveLocalTokenInstructionBuilder().
		SetParams(params).
		SetPayeeAccount(payee).
		SetTokenControllerAccount(tokenController).
		SetTokenMinterAccount(tokenMinter).
		SetLocalTokenAccount(localToken).
		SetCustodyTokenAccountAccount(custodyTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
