// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DepositForBurnWithCaller is the `depositForBurnWithCaller` instruction.
type DepositForBurnWithCaller struct {
	Params *DepositForBurnWithCallerParams

	// [0] = [SIGNER] owner
	//
	// [1] = [WRITE, SIGNER] eventRentPayer
	//
	// [2] = [] senderAuthorityPda
	//
	// [3] = [WRITE] burnTokenAccount
	//
	// [4] = [WRITE] messageTransmitter
	//
	// [5] = [] tokenMessenger
	//
	// [6] = [] remoteTokenMessenger
	//
	// [7] = [] tokenMinter
	//
	// [8] = [WRITE] localToken
	//
	// [9] = [WRITE] burnTokenMint
	//
	// [10] = [WRITE, SIGNER] messageSentEventData
	//
	// [11] = [] messageTransmitterProgram
	//
	// [12] = [] tokenMessengerMinterProgram
	//
	// [13] = [] tokenProgram
	//
	// [14] = [] systemProgram
	//
	// [15] = [] eventAuthority
	//
	// [16] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositForBurnWithCallerInstructionBuilder creates a new `DepositForBurnWithCaller` instruction builder.
func NewDepositForBurnWithCallerInstructionBuilder() *DepositForBurnWithCaller {
	nd := &DepositForBurnWithCaller{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *DepositForBurnWithCaller) SetParams(params DepositForBurnWithCallerParams) *DepositForBurnWithCaller {
	inst.Params = &params
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *DepositForBurnWithCaller) SetOwnerAccount(owner ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *DepositForBurnWithCaller) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEventRentPayerAccount sets the "eventRentPayer" account.
func (inst *DepositForBurnWithCaller) SetEventRentPayerAccount(eventRentPayer ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(eventRentPayer).WRITE().SIGNER()
	return inst
}

// GetEventRentPayerAccount gets the "eventRentPayer" account.
func (inst *DepositForBurnWithCaller) GetEventRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSenderAuthorityPdaAccount sets the "senderAuthorityPda" account.
func (inst *DepositForBurnWithCaller) SetSenderAuthorityPdaAccount(senderAuthorityPda ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(senderAuthorityPda)
	return inst
}

// GetSenderAuthorityPdaAccount gets the "senderAuthorityPda" account.
func (inst *DepositForBurnWithCaller) GetSenderAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBurnTokenAccountAccount sets the "burnTokenAccount" account.
func (inst *DepositForBurnWithCaller) SetBurnTokenAccountAccount(burnTokenAccount ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(burnTokenAccount).WRITE()
	return inst
}

// GetBurnTokenAccountAccount gets the "burnTokenAccount" account.
func (inst *DepositForBurnWithCaller) GetBurnTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMessageTransmitterAccount sets the "messageTransmitter" account.
func (inst *DepositForBurnWithCaller) SetMessageTransmitterAccount(messageTransmitter ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(messageTransmitter).WRITE()
	return inst
}

// GetMessageTransmitterAccount gets the "messageTransmitter" account.
func (inst *DepositForBurnWithCaller) GetMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenMessengerAccount sets the "tokenMessenger" account.
func (inst *DepositForBurnWithCaller) SetTokenMessengerAccount(tokenMessenger ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenMessenger)
	return inst
}

// GetTokenMessengerAccount gets the "tokenMessenger" account.
func (inst *DepositForBurnWithCaller) GetTokenMessengerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRemoteTokenMessengerAccount sets the "remoteTokenMessenger" account.
func (inst *DepositForBurnWithCaller) SetRemoteTokenMessengerAccount(remoteTokenMessenger ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(remoteTokenMessenger)
	return inst
}

// GetRemoteTokenMessengerAccount gets the "remoteTokenMessenger" account.
func (inst *DepositForBurnWithCaller) GetRemoteTokenMessengerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenMinterAccount sets the "tokenMinter" account.
func (inst *DepositForBurnWithCaller) SetTokenMinterAccount(tokenMinter ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenMinter)
	return inst
}

// GetTokenMinterAccount gets the "tokenMinter" account.
func (inst *DepositForBurnWithCaller) GetTokenMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetLocalTokenAccount sets the "localToken" account.
func (inst *DepositForBurnWithCaller) SetLocalTokenAccount(localToken ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(localToken).WRITE()
	return inst
}

// GetLocalTokenAccount gets the "localToken" account.
func (inst *DepositForBurnWithCaller) GetLocalTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetBurnTokenMintAccount sets the "burnTokenMint" account.
func (inst *DepositForBurnWithCaller) SetBurnTokenMintAccount(burnTokenMint ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(burnTokenMint).WRITE()
	return inst
}

// GetBurnTokenMintAccount gets the "burnTokenMint" account.
func (inst *DepositForBurnWithCaller) GetBurnTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMessageSentEventDataAccount sets the "messageSentEventData" account.
func (inst *DepositForBurnWithCaller) SetMessageSentEventDataAccount(messageSentEventData ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(messageSentEventData).WRITE().SIGNER()
	return inst
}

// GetMessageSentEventDataAccount gets the "messageSentEventData" account.
func (inst *DepositForBurnWithCaller) GetMessageSentEventDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMessageTransmitterProgramAccount sets the "messageTransmitterProgram" account.
func (inst *DepositForBurnWithCaller) SetMessageTransmitterProgramAccount(messageTransmitterProgram ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(messageTransmitterProgram)
	return inst
}

// GetMessageTransmitterProgramAccount gets the "messageTransmitterProgram" account.
func (inst *DepositForBurnWithCaller) GetMessageTransmitterProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenMessengerMinterProgramAccount sets the "tokenMessengerMinterProgram" account.
func (inst *DepositForBurnWithCaller) SetTokenMessengerMinterProgramAccount(tokenMessengerMinterProgram ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenMessengerMinterProgram)
	return inst
}

// GetTokenMessengerMinterProgramAccount gets the "tokenMessengerMinterProgram" account.
func (inst *DepositForBurnWithCaller) GetTokenMessengerMinterProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DepositForBurnWithCaller) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DepositForBurnWithCaller) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *DepositForBurnWithCaller) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *DepositForBurnWithCaller) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *DepositForBurnWithCaller) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *DepositForBurnWithCaller) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetProgramAccount sets the "program" account.
func (inst *DepositForBurnWithCaller) SetProgramAccount(program ag_solanago.PublicKey) *DepositForBurnWithCaller {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *DepositForBurnWithCaller) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst DepositForBurnWithCaller) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DepositForBurnWithCaller,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositForBurnWithCaller) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositForBurnWithCaller) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.EventRentPayer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SenderAuthorityPda is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BurnTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MessageTransmitter is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenMessenger is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RemoteTokenMessenger is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenMinter is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.LocalToken is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.BurnTokenMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MessageSentEventData is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MessageTransmitterProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenMessengerMinterProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *DepositForBurnWithCaller) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositForBurnWithCaller")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             eventRentPayer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         senderAuthorityPda", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                  burnToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         messageTransmitter", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             tokenMessenger", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       remoteTokenMessenger", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                tokenMinter", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 localToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              burnTokenMint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       messageSentEventData", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  messageTransmitterProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("tokenMessengerMinterProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("             eventAuthority", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                    program", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj DepositForBurnWithCaller) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositForBurnWithCaller) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositForBurnWithCallerInstruction declares a new DepositForBurnWithCaller instruction with the provided parameters and accounts.
func NewDepositForBurnWithCallerInstruction(
	// Parameters:
	params DepositForBurnWithCallerParams,
	// Accounts:
	owner ag_solanago.PublicKey,
	eventRentPayer ag_solanago.PublicKey,
	senderAuthorityPda ag_solanago.PublicKey,
	burnTokenAccount ag_solanago.PublicKey,
	messageTransmitter ag_solanago.PublicKey,
	tokenMessenger ag_solanago.PublicKey,
	remoteTokenMessenger ag_solanago.PublicKey,
	tokenMinter ag_solanago.PublicKey,
	localToken ag_solanago.PublicKey,
	burnTokenMint ag_solanago.PublicKey,
	messageSentEventData ag_solanago.PublicKey,
	messageTransmitterProgram ag_solanago.PublicKey,
	tokenMessengerMinterProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *DepositForBurnWithCaller {
	return NewDepositForBurnWithCallerInstructionBuilder().
		SetParams(params).
		SetOwnerAccount(owner).
		SetEventRentPayerAccount(eventRentPayer).
		SetSenderAuthorityPdaAccount(senderAuthorityPda).
		SetBurnTokenAccountAccount(burnTokenAccount).
		SetMessageTransmitterAccount(messageTransmitter).
		SetTokenMessengerAccount(tokenMessenger).
		SetRemoteTokenMessengerAccount(remoteTokenMessenger).
		SetTokenMinterAccount(tokenMinter).
		SetLocalTokenAccount(localToken).
		SetBurnTokenMintAccount(burnTokenMint).
		SetMessageSentEventDataAccount(messageSentEventData).
		SetMessageTransmitterProgramAccount(messageTransmitterProgram).
		SetTokenMessengerMinterProgramAccount(tokenMessengerMinterProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
