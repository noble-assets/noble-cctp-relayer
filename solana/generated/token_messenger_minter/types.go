// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AcceptOwnershipParams struct{}

func (obj AcceptOwnershipParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AcceptOwnershipParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type AddRemoteTokenMessengerParams struct {
	Domain         uint32
	TokenMessenger ag_solanago.PublicKey
}

func (obj AddRemoteTokenMessengerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Domain` param:
	err = encoder.Encode(obj.Domain)
	if err != nil {
		return err
	}
	// Serialize `TokenMessenger` param:
	err = encoder.Encode(obj.TokenMessenger)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddRemoteTokenMessengerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Domain`:
	err = decoder.Decode(&obj.Domain)
	if err != nil {
		return err
	}
	// Deserialize `TokenMessenger`:
	err = decoder.Decode(&obj.TokenMessenger)
	if err != nil {
		return err
	}
	return nil
}

type DepositForBurnWithCallerParams struct {
	Amount            uint64
	DestinationDomain uint32
	MintRecipient     ag_solanago.PublicKey
	DestinationCaller ag_solanago.PublicKey
}

func (obj DepositForBurnWithCallerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `DestinationDomain` param:
	err = encoder.Encode(obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Serialize `MintRecipient` param:
	err = encoder.Encode(obj.MintRecipient)
	if err != nil {
		return err
	}
	// Serialize `DestinationCaller` param:
	err = encoder.Encode(obj.DestinationCaller)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositForBurnWithCallerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `DestinationDomain`:
	err = decoder.Decode(&obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Deserialize `MintRecipient`:
	err = decoder.Decode(&obj.MintRecipient)
	if err != nil {
		return err
	}
	// Deserialize `DestinationCaller`:
	err = decoder.Decode(&obj.DestinationCaller)
	if err != nil {
		return err
	}
	return nil
}

type DepositForBurnParams struct {
	Amount            uint64
	DestinationDomain uint32
	MintRecipient     ag_solanago.PublicKey
}

func (obj DepositForBurnParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `DestinationDomain` param:
	err = encoder.Encode(obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Serialize `MintRecipient` param:
	err = encoder.Encode(obj.MintRecipient)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositForBurnParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `DestinationDomain`:
	err = decoder.Decode(&obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Deserialize `MintRecipient`:
	err = decoder.Decode(&obj.MintRecipient)
	if err != nil {
		return err
	}
	return nil
}

type HandleReceiveMessageParams struct {
	RemoteDomain  uint32
	Sender        ag_solanago.PublicKey
	MessageBody   []byte
	AuthorityBump uint8
}

func (obj HandleReceiveMessageParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RemoteDomain` param:
	err = encoder.Encode(obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `MessageBody` param:
	err = encoder.Encode(obj.MessageBody)
	if err != nil {
		return err
	}
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HandleReceiveMessageParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RemoteDomain`:
	err = decoder.Decode(&obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `MessageBody`:
	err = decoder.Decode(&obj.MessageBody)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	return nil
}

type InitializeParams struct {
	TokenController         ag_solanago.PublicKey
	LocalMessageTransmitter ag_solanago.PublicKey
	MessageBodyVersion      uint32
}

func (obj InitializeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenController` param:
	err = encoder.Encode(obj.TokenController)
	if err != nil {
		return err
	}
	// Serialize `LocalMessageTransmitter` param:
	err = encoder.Encode(obj.LocalMessageTransmitter)
	if err != nil {
		return err
	}
	// Serialize `MessageBodyVersion` param:
	err = encoder.Encode(obj.MessageBodyVersion)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenController`:
	err = decoder.Decode(&obj.TokenController)
	if err != nil {
		return err
	}
	// Deserialize `LocalMessageTransmitter`:
	err = decoder.Decode(&obj.LocalMessageTransmitter)
	if err != nil {
		return err
	}
	// Deserialize `MessageBodyVersion`:
	err = decoder.Decode(&obj.MessageBodyVersion)
	if err != nil {
		return err
	}
	return nil
}

type RemoveRemoteTokenMessengerParams struct{}

func (obj RemoveRemoteTokenMessengerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RemoveRemoteTokenMessengerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type ReplaceDepositForBurnParams struct {
	OriginalMessage      []byte
	OriginalAttestation  []byte
	NewDestinationCaller ag_solanago.PublicKey
	NewMintRecipient     ag_solanago.PublicKey
}

func (obj ReplaceDepositForBurnParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OriginalMessage` param:
	err = encoder.Encode(obj.OriginalMessage)
	if err != nil {
		return err
	}
	// Serialize `OriginalAttestation` param:
	err = encoder.Encode(obj.OriginalAttestation)
	if err != nil {
		return err
	}
	// Serialize `NewDestinationCaller` param:
	err = encoder.Encode(obj.NewDestinationCaller)
	if err != nil {
		return err
	}
	// Serialize `NewMintRecipient` param:
	err = encoder.Encode(obj.NewMintRecipient)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReplaceDepositForBurnParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OriginalMessage`:
	err = decoder.Decode(&obj.OriginalMessage)
	if err != nil {
		return err
	}
	// Deserialize `OriginalAttestation`:
	err = decoder.Decode(&obj.OriginalAttestation)
	if err != nil {
		return err
	}
	// Deserialize `NewDestinationCaller`:
	err = decoder.Decode(&obj.NewDestinationCaller)
	if err != nil {
		return err
	}
	// Deserialize `NewMintRecipient`:
	err = decoder.Decode(&obj.NewMintRecipient)
	if err != nil {
		return err
	}
	return nil
}

type TransferOwnershipParams struct {
	NewOwner ag_solanago.PublicKey
}

func (obj TransferOwnershipParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewOwner` param:
	err = encoder.Encode(obj.NewOwner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferOwnershipParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewOwner`:
	err = decoder.Decode(&obj.NewOwner)
	if err != nil {
		return err
	}
	return nil
}

type AddLocalTokenParams struct{}

func (obj AddLocalTokenParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AddLocalTokenParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type BurnTokenCustodyParams struct {
	Amount uint64
}

func (obj BurnTokenCustodyParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BurnTokenCustodyParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type LinkTokenPairParams struct {
	LocalToken   ag_solanago.PublicKey
	RemoteDomain uint32
	RemoteToken  ag_solanago.PublicKey
}

func (obj LinkTokenPairParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LocalToken` param:
	err = encoder.Encode(obj.LocalToken)
	if err != nil {
		return err
	}
	// Serialize `RemoteDomain` param:
	err = encoder.Encode(obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Serialize `RemoteToken` param:
	err = encoder.Encode(obj.RemoteToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LinkTokenPairParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LocalToken`:
	err = decoder.Decode(&obj.LocalToken)
	if err != nil {
		return err
	}
	// Deserialize `RemoteDomain`:
	err = decoder.Decode(&obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Deserialize `RemoteToken`:
	err = decoder.Decode(&obj.RemoteToken)
	if err != nil {
		return err
	}
	return nil
}

type PauseParams struct{}

func (obj PauseParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *PauseParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type RemoveLocalTokenParams struct{}

func (obj RemoveLocalTokenParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RemoveLocalTokenParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type SetMaxBurnAmountPerMessageParams struct {
	BurnLimitPerMessage uint64
}

func (obj SetMaxBurnAmountPerMessageParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BurnLimitPerMessage` param:
	err = encoder.Encode(obj.BurnLimitPerMessage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetMaxBurnAmountPerMessageParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BurnLimitPerMessage`:
	err = decoder.Decode(&obj.BurnLimitPerMessage)
	if err != nil {
		return err
	}
	return nil
}

type SetTokenControllerParams struct {
	TokenController ag_solanago.PublicKey
}

func (obj SetTokenControllerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenController` param:
	err = encoder.Encode(obj.TokenController)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetTokenControllerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenController`:
	err = decoder.Decode(&obj.TokenController)
	if err != nil {
		return err
	}
	return nil
}

type UninkTokenPairParams struct{}

func (obj UninkTokenPairParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UninkTokenPairParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type UnpauseParams struct{}

func (obj UnpauseParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UnpauseParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type UpdatePauserParams struct {
	NewPauser ag_solanago.PublicKey
}

func (obj UpdatePauserParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewPauser` param:
	err = encoder.Encode(obj.NewPauser)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdatePauserParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewPauser`:
	err = decoder.Decode(&obj.NewPauser)
	if err != nil {
		return err
	}
	return nil
}

type TokenMinterError ag_binary.BorshEnum

const (
	TokenMinterErrorInvalidAuthority TokenMinterError = iota
	TokenMinterErrorInvalidTokenMinterState
	TokenMinterErrorProgramPaused
	TokenMinterErrorInvalidTokenPairState
	TokenMinterErrorInvalidLocalTokenState
	TokenMinterErrorInvalidPauser
	TokenMinterErrorInvalidTokenController
	TokenMinterErrorBurnAmountExceeded
	TokenMinterErrorInvalidAmount
)

func (value TokenMinterError) String() string {
	switch value {
	case TokenMinterErrorInvalidAuthority:
		return "InvalidAuthority"
	case TokenMinterErrorInvalidTokenMinterState:
		return "InvalidTokenMinterState"
	case TokenMinterErrorProgramPaused:
		return "ProgramPaused"
	case TokenMinterErrorInvalidTokenPairState:
		return "InvalidTokenPairState"
	case TokenMinterErrorInvalidLocalTokenState:
		return "InvalidLocalTokenState"
	case TokenMinterErrorInvalidPauser:
		return "InvalidPauser"
	case TokenMinterErrorInvalidTokenController:
		return "InvalidTokenController"
	case TokenMinterErrorBurnAmountExceeded:
		return "BurnAmountExceeded"
	case TokenMinterErrorInvalidAmount:
		return "InvalidAmount"
	default:
		return ""
	}
}
