// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "TokenMessengerMinter"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_TransferOwnership = ag_binary.TypeID([8]byte{65, 177, 215, 73, 53, 45, 99, 47})

	Instruction_AcceptOwnership = ag_binary.TypeID([8]byte{172, 23, 43, 13, 238, 213, 85, 150})

	Instruction_AddRemoteTokenMessenger = ag_binary.TypeID([8]byte{12, 149, 172, 165, 111, 202, 24, 33})

	Instruction_RemoveRemoteTokenMessenger = ag_binary.TypeID([8]byte{65, 114, 66, 85, 169, 98, 177, 146})

	Instruction_DepositForBurn = ag_binary.TypeID([8]byte{215, 60, 61, 46, 114, 55, 128, 176})

	Instruction_DepositForBurnWithCaller = ag_binary.TypeID([8]byte{167, 222, 19, 114, 85, 21, 14, 118})

	Instruction_ReplaceDepositForBurn = ag_binary.TypeID([8]byte{7, 27, 93, 132, 1, 80, 19, 163})

	Instruction_HandleReceiveMessage = ag_binary.TypeID([8]byte{133, 102, 1, 180, 145, 11, 138, 180})

	Instruction_SetTokenController = ag_binary.TypeID([8]byte{88, 6, 98, 10, 79, 59, 15, 24})

	Instruction_Pause = ag_binary.TypeID([8]byte{211, 22, 221, 251, 74, 121, 193, 47})

	Instruction_Unpause = ag_binary.TypeID([8]byte{169, 144, 4, 38, 10, 141, 188, 255})

	Instruction_UpdatePauser = ag_binary.TypeID([8]byte{140, 171, 211, 132, 57, 201, 16, 254})

	Instruction_SetMaxBurnAmountPerMessage = ag_binary.TypeID([8]byte{30, 128, 145, 240, 70, 237, 109, 207})

	Instruction_AddLocalToken = ag_binary.TypeID([8]byte{213, 199, 205, 18, 98, 124, 73, 198})

	Instruction_RemoveLocalToken = ag_binary.TypeID([8]byte{27, 43, 66, 170, 188, 44, 109, 97})

	Instruction_LinkTokenPair = ag_binary.TypeID([8]byte{68, 162, 24, 104, 125, 46, 130, 12})

	Instruction_UnlinkTokenPair = ag_binary.TypeID([8]byte{52, 198, 100, 114, 104, 174, 85, 58})

	Instruction_BurnTokenCustody = ag_binary.TypeID([8]byte{233, 136, 180, 175, 112, 41, 62, 71})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_TransferOwnership:
		return "TransferOwnership"
	case Instruction_AcceptOwnership:
		return "AcceptOwnership"
	case Instruction_AddRemoteTokenMessenger:
		return "AddRemoteTokenMessenger"
	case Instruction_RemoveRemoteTokenMessenger:
		return "RemoveRemoteTokenMessenger"
	case Instruction_DepositForBurn:
		return "DepositForBurn"
	case Instruction_DepositForBurnWithCaller:
		return "DepositForBurnWithCaller"
	case Instruction_ReplaceDepositForBurn:
		return "ReplaceDepositForBurn"
	case Instruction_HandleReceiveMessage:
		return "HandleReceiveMessage"
	case Instruction_SetTokenController:
		return "SetTokenController"
	case Instruction_Pause:
		return "Pause"
	case Instruction_Unpause:
		return "Unpause"
	case Instruction_UpdatePauser:
		return "UpdatePauser"
	case Instruction_SetMaxBurnAmountPerMessage:
		return "SetMaxBurnAmountPerMessage"
	case Instruction_AddLocalToken:
		return "AddLocalToken"
	case Instruction_RemoveLocalToken:
		return "RemoveLocalToken"
	case Instruction_LinkTokenPair:
		return "LinkTokenPair"
	case Instruction_UnlinkTokenPair:
		return "UnlinkTokenPair"
	case Instruction_BurnTokenCustody:
		return "BurnTokenCustody"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"transfer_ownership", (*TransferOwnership)(nil),
		},
		{
			"accept_ownership", (*AcceptOwnership)(nil),
		},
		{
			"add_remote_token_messenger", (*AddRemoteTokenMessenger)(nil),
		},
		{
			"remove_remote_token_messenger", (*RemoveRemoteTokenMessenger)(nil),
		},
		{
			"deposit_for_burn", (*DepositForBurn)(nil),
		},
		{
			"deposit_for_burn_with_caller", (*DepositForBurnWithCaller)(nil),
		},
		{
			"replace_deposit_for_burn", (*ReplaceDepositForBurn)(nil),
		},
		{
			"handle_receive_message", (*HandleReceiveMessage)(nil),
		},
		{
			"set_token_controller", (*SetTokenController)(nil),
		},
		{
			"pause", (*Pause)(nil),
		},
		{
			"unpause", (*Unpause)(nil),
		},
		{
			"update_pauser", (*UpdatePauser)(nil),
		},
		{
			"set_max_burn_amount_per_message", (*SetMaxBurnAmountPerMessage)(nil),
		},
		{
			"add_local_token", (*AddLocalToken)(nil),
		},
		{
			"remove_local_token", (*RemoveLocalToken)(nil),
		},
		{
			"link_token_pair", (*LinkTokenPair)(nil),
		},
		{
			"unlink_token_pair", (*UnlinkTokenPair)(nil),
		},
		{
			"burn_token_custody", (*BurnTokenCustody)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
