// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdatePauser is the `updatePauser` instruction.
type UpdatePauser struct {
	Params *UpdatePauserParams

	// [0] = [SIGNER] owner
	//
	// [1] = [] tokenMessenger
	//
	// [2] = [WRITE] tokenMinter
	//
	// [3] = [] eventAuthority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdatePauserInstructionBuilder creates a new `UpdatePauser` instruction builder.
func NewUpdatePauserInstructionBuilder() *UpdatePauser {
	nd := &UpdatePauser{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *UpdatePauser) SetParams(params UpdatePauserParams) *UpdatePauser {
	inst.Params = &params
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *UpdatePauser) SetOwnerAccount(owner ag_solanago.PublicKey) *UpdatePauser {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *UpdatePauser) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMessengerAccount sets the "tokenMessenger" account.
func (inst *UpdatePauser) SetTokenMessengerAccount(tokenMessenger ag_solanago.PublicKey) *UpdatePauser {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMessenger)
	return inst
}

// GetTokenMessengerAccount gets the "tokenMessenger" account.
func (inst *UpdatePauser) GetTokenMessengerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMinterAccount sets the "tokenMinter" account.
func (inst *UpdatePauser) SetTokenMinterAccount(tokenMinter ag_solanago.PublicKey) *UpdatePauser {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMinter).WRITE()
	return inst
}

// GetTokenMinterAccount gets the "tokenMinter" account.
func (inst *UpdatePauser) GetTokenMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *UpdatePauser) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *UpdatePauser {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *UpdatePauser) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *UpdatePauser) SetProgramAccount(program ag_solanago.PublicKey) *UpdatePauser {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *UpdatePauser) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst UpdatePauser) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdatePauser,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdatePauser) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdatePauser) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMessenger is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMinter is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *UpdatePauser) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdatePauser")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("tokenMessenger", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   tokenMinter", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("eventAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj UpdatePauser) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdatePauser) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdatePauserInstruction declares a new UpdatePauser instruction with the provided parameters and accounts.
func NewUpdatePauserInstruction(
	// Parameters:
	params UpdatePauserParams,
	// Accounts:
	owner ag_solanago.PublicKey,
	tokenMessenger ag_solanago.PublicKey,
	tokenMinter ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *UpdatePauser {
	return NewUpdatePauserInstructionBuilder().
		SetParams(params).
		SetOwnerAccount(owner).
		SetTokenMessengerAccount(tokenMessenger).
		SetTokenMinterAccount(tokenMinter).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
