// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddRemoteTokenMessenger is the `addRemoteTokenMessenger` instruction.
type AddRemoteTokenMessenger struct {
	Params *AddRemoteTokenMessengerParams

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] owner
	//
	// [2] = [] tokenMessenger
	//
	// [3] = [WRITE] remoteTokenMessenger
	//
	// [4] = [] systemProgram
	//
	// [5] = [] eventAuthority
	//
	// [6] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddRemoteTokenMessengerInstructionBuilder creates a new `AddRemoteTokenMessenger` instruction builder.
func NewAddRemoteTokenMessengerInstructionBuilder() *AddRemoteTokenMessenger {
	nd := &AddRemoteTokenMessenger{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *AddRemoteTokenMessenger) SetParams(params AddRemoteTokenMessengerParams) *AddRemoteTokenMessenger {
	inst.Params = &params
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *AddRemoteTokenMessenger) SetPayerAccount(payer ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *AddRemoteTokenMessenger) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *AddRemoteTokenMessenger) SetOwnerAccount(owner ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *AddRemoteTokenMessenger) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMessengerAccount sets the "tokenMessenger" account.
func (inst *AddRemoteTokenMessenger) SetTokenMessengerAccount(tokenMessenger ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMessenger)
	return inst
}

// GetTokenMessengerAccount gets the "tokenMessenger" account.
func (inst *AddRemoteTokenMessenger) GetTokenMessengerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRemoteTokenMessengerAccount sets the "remoteTokenMessenger" account.
func (inst *AddRemoteTokenMessenger) SetRemoteTokenMessengerAccount(remoteTokenMessenger ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(remoteTokenMessenger).WRITE()
	return inst
}

// GetRemoteTokenMessengerAccount gets the "remoteTokenMessenger" account.
func (inst *AddRemoteTokenMessenger) GetRemoteTokenMessengerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddRemoteTokenMessenger) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddRemoteTokenMessenger) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *AddRemoteTokenMessenger) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *AddRemoteTokenMessenger) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetProgramAccount sets the "program" account.
func (inst *AddRemoteTokenMessenger) SetProgramAccount(program ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AddRemoteTokenMessenger) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst AddRemoteTokenMessenger) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddRemoteTokenMessenger,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddRemoteTokenMessenger) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddRemoteTokenMessenger) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMessenger is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RemoteTokenMessenger is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AddRemoteTokenMessenger) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddRemoteTokenMessenger")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      tokenMessenger", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("remoteTokenMessenger", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      eventAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             program", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj AddRemoteTokenMessenger) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddRemoteTokenMessenger) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewAddRemoteTokenMessengerInstruction declares a new AddRemoteTokenMessenger instruction with the provided parameters and accounts.
func NewAddRemoteTokenMessengerInstruction(
	// Parameters:
	params AddRemoteTokenMessengerParams,
	// Accounts:
	payer ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	tokenMessenger ag_solanago.PublicKey,
	remoteTokenMessenger ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *AddRemoteTokenMessenger {
	return NewAddRemoteTokenMessengerInstructionBuilder().
		SetParams(params).
		SetPayerAccount(payer).
		SetOwnerAccount(owner).
		SetTokenMessengerAccount(tokenMessenger).
		SetRemoteTokenMessengerAccount(remoteTokenMessenger).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
