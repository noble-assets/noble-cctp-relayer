// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type TokenMessenger struct {
	Owner                   ag_solanago.PublicKey
	PendingOwner            ag_solanago.PublicKey
	LocalMessageTransmitter ag_solanago.PublicKey
	MessageBodyVersion      uint32
	AuthorityBump           uint8
}

var TokenMessengerDiscriminator = [8]byte{162, 4, 242, 52, 147, 243, 221, 96}

func (obj TokenMessenger) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenMessengerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `PendingOwner` param:
	err = encoder.Encode(obj.PendingOwner)
	if err != nil {
		return err
	}
	// Serialize `LocalMessageTransmitter` param:
	err = encoder.Encode(obj.LocalMessageTransmitter)
	if err != nil {
		return err
	}
	// Serialize `MessageBodyVersion` param:
	err = encoder.Encode(obj.MessageBodyVersion)
	if err != nil {
		return err
	}
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenMessenger) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenMessengerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[162 4 242 52 147 243 221 96]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `PendingOwner`:
	err = decoder.Decode(&obj.PendingOwner)
	if err != nil {
		return err
	}
	// Deserialize `LocalMessageTransmitter`:
	err = decoder.Decode(&obj.LocalMessageTransmitter)
	if err != nil {
		return err
	}
	// Deserialize `MessageBodyVersion`:
	err = decoder.Decode(&obj.MessageBodyVersion)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	return nil
}

type RemoteTokenMessenger struct {
	Domain         uint32
	TokenMessenger ag_solanago.PublicKey
}

var RemoteTokenMessengerDiscriminator = [8]byte{105, 115, 174, 34, 95, 233, 138, 252}

func (obj RemoteTokenMessenger) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RemoteTokenMessengerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Domain` param:
	err = encoder.Encode(obj.Domain)
	if err != nil {
		return err
	}
	// Serialize `TokenMessenger` param:
	err = encoder.Encode(obj.TokenMessenger)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoteTokenMessenger) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RemoteTokenMessengerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[105 115 174 34 95 233 138 252]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Domain`:
	err = decoder.Decode(&obj.Domain)
	if err != nil {
		return err
	}
	// Deserialize `TokenMessenger`:
	err = decoder.Decode(&obj.TokenMessenger)
	if err != nil {
		return err
	}
	return nil
}

type TokenMinter struct {
	TokenController ag_solanago.PublicKey
	Pauser          ag_solanago.PublicKey
	Paused          bool
	Bump            uint8
}

var TokenMinterDiscriminator = [8]byte{122, 133, 84, 63, 57, 159, 171, 206}

func (obj TokenMinter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenMinterDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TokenController` param:
	err = encoder.Encode(obj.TokenController)
	if err != nil {
		return err
	}
	// Serialize `Pauser` param:
	err = encoder.Encode(obj.Pauser)
	if err != nil {
		return err
	}
	// Serialize `Paused` param:
	err = encoder.Encode(obj.Paused)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenMinter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenMinterDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[122 133 84 63 57 159 171 206]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TokenController`:
	err = decoder.Decode(&obj.TokenController)
	if err != nil {
		return err
	}
	// Deserialize `Pauser`:
	err = decoder.Decode(&obj.Pauser)
	if err != nil {
		return err
	}
	// Deserialize `Paused`:
	err = decoder.Decode(&obj.Paused)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

type TokenPair struct {
	RemoteDomain uint32
	RemoteToken  ag_solanago.PublicKey
	LocalToken   ag_solanago.PublicKey
	Bump         uint8
}

var TokenPairDiscriminator = [8]byte{17, 214, 45, 176, 229, 149, 197, 71}

func (obj TokenPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenPairDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `RemoteDomain` param:
	err = encoder.Encode(obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Serialize `RemoteToken` param:
	err = encoder.Encode(obj.RemoteToken)
	if err != nil {
		return err
	}
	// Serialize `LocalToken` param:
	err = encoder.Encode(obj.LocalToken)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenPairDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[17 214 45 176 229 149 197 71]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `RemoteDomain`:
	err = decoder.Decode(&obj.RemoteDomain)
	if err != nil {
		return err
	}
	// Deserialize `RemoteToken`:
	err = decoder.Decode(&obj.RemoteToken)
	if err != nil {
		return err
	}
	// Deserialize `LocalToken`:
	err = decoder.Decode(&obj.LocalToken)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

type LocalToken struct {
	Custody             ag_solanago.PublicKey
	Mint                ag_solanago.PublicKey
	BurnLimitPerMessage uint64
	MessagesSent        uint64
	MessagesReceived    uint64
	AmountSent          ag_binary.Uint128
	AmountReceived      ag_binary.Uint128
	Bump                uint8
	CustodyBump         uint8
}

var LocalTokenDiscriminator = [8]byte{159, 131, 58, 170, 193, 84, 128, 182}

func (obj LocalToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LocalTokenDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Custody` param:
	err = encoder.Encode(obj.Custody)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `BurnLimitPerMessage` param:
	err = encoder.Encode(obj.BurnLimitPerMessage)
	if err != nil {
		return err
	}
	// Serialize `MessagesSent` param:
	err = encoder.Encode(obj.MessagesSent)
	if err != nil {
		return err
	}
	// Serialize `MessagesReceived` param:
	err = encoder.Encode(obj.MessagesReceived)
	if err != nil {
		return err
	}
	// Serialize `AmountSent` param:
	err = encoder.Encode(obj.AmountSent)
	if err != nil {
		return err
	}
	// Serialize `AmountReceived` param:
	err = encoder.Encode(obj.AmountReceived)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `CustodyBump` param:
	err = encoder.Encode(obj.CustodyBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LocalToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LocalTokenDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[159 131 58 170 193 84 128 182]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Custody`:
	err = decoder.Decode(&obj.Custody)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `BurnLimitPerMessage`:
	err = decoder.Decode(&obj.BurnLimitPerMessage)
	if err != nil {
		return err
	}
	// Deserialize `MessagesSent`:
	err = decoder.Decode(&obj.MessagesSent)
	if err != nil {
		return err
	}
	// Deserialize `MessagesReceived`:
	err = decoder.Decode(&obj.MessagesReceived)
	if err != nil {
		return err
	}
	// Deserialize `AmountSent`:
	err = decoder.Decode(&obj.AmountSent)
	if err != nil {
		return err
	}
	// Deserialize `AmountReceived`:
	err = decoder.Decode(&obj.AmountReceived)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `CustodyBump`:
	err = decoder.Decode(&obj.CustodyBump)
	if err != nil {
		return err
	}
	return nil
}
