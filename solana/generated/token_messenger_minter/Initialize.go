// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_messenger_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	Params *InitializeParams

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] upgradeAuthority
	//
	// [2] = [] authorityPda
	//
	// [3] = [WRITE] tokenMessenger
	//
	// [4] = [WRITE] tokenMinter
	//
	// [5] = [] tokenMessengerMinterProgramData
	//
	// [6] = [] tokenMessengerMinterProgram
	//
	// [7] = [] systemProgram
	//
	// [8] = [] eventAuthority
	//
	// [9] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *Initialize) SetParams(params InitializeParams) *Initialize {
	inst.Params = &params
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *Initialize) SetPayerAccount(payer ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *Initialize) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUpgradeAuthorityAccount sets the "upgradeAuthority" account.
func (inst *Initialize) SetUpgradeAuthorityAccount(upgradeAuthority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(upgradeAuthority).SIGNER()
	return inst
}

// GetUpgradeAuthorityAccount gets the "upgradeAuthority" account.
func (inst *Initialize) GetUpgradeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityPdaAccount sets the "authorityPda" account.
func (inst *Initialize) SetAuthorityPdaAccount(authorityPda ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authorityPda)
	return inst
}

// GetAuthorityPdaAccount gets the "authorityPda" account.
func (inst *Initialize) GetAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMessengerAccount sets the "tokenMessenger" account.
func (inst *Initialize) SetTokenMessengerAccount(tokenMessenger ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMessenger).WRITE()
	return inst
}

// GetTokenMessengerAccount gets the "tokenMessenger" account.
func (inst *Initialize) GetTokenMessengerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMinterAccount sets the "tokenMinter" account.
func (inst *Initialize) SetTokenMinterAccount(tokenMinter ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMinter).WRITE()
	return inst
}

// GetTokenMinterAccount gets the "tokenMinter" account.
func (inst *Initialize) GetTokenMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenMessengerMinterProgramDataAccount sets the "tokenMessengerMinterProgramData" account.
func (inst *Initialize) SetTokenMessengerMinterProgramDataAccount(tokenMessengerMinterProgramData ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenMessengerMinterProgramData)
	return inst
}

// GetTokenMessengerMinterProgramDataAccount gets the "tokenMessengerMinterProgramData" account.
func (inst *Initialize) GetTokenMessengerMinterProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenMessengerMinterProgramAccount sets the "tokenMessengerMinterProgram" account.
func (inst *Initialize) SetTokenMessengerMinterProgramAccount(tokenMessengerMinterProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenMessengerMinterProgram)
	return inst
}

// GetTokenMessengerMinterProgramAccount gets the "tokenMessengerMinterProgram" account.
func (inst *Initialize) GetTokenMessengerMinterProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Initialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Initialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *Initialize) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *Initialize) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAccount sets the "program" account.
func (inst *Initialize) SetProgramAccount(program ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Initialize) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UpgradeAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AuthorityPda is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMessenger is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMinter is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenMessengerMinterProgramData is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenMessengerMinterProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                          payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               upgradeAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                   authorityPda", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 tokenMessenger", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    tokenMinter", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("tokenMessengerMinterProgramData", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    tokenMessengerMinterProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                  systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 eventAuthority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                        program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	params InitializeParams,
	// Accounts:
	payer ag_solanago.PublicKey,
	upgradeAuthority ag_solanago.PublicKey,
	authorityPda ag_solanago.PublicKey,
	tokenMessenger ag_solanago.PublicKey,
	tokenMinter ag_solanago.PublicKey,
	tokenMessengerMinterProgramData ag_solanago.PublicKey,
	tokenMessengerMinterProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetParams(params).
		SetPayerAccount(payer).
		SetUpgradeAuthorityAccount(upgradeAuthority).
		SetAuthorityPdaAccount(authorityPda).
		SetTokenMessengerAccount(tokenMessenger).
		SetTokenMinterAccount(tokenMinter).
		SetTokenMessengerMinterProgramDataAccount(tokenMessengerMinterProgramData).
		SetTokenMessengerMinterProgramAccount(tokenMessengerMinterProgram).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
